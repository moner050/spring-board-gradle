# 디버그 로그를 활성화할껀지
debug: false

# Actuator 에 Endpoint 에 감춰진것을 모두 활성화시켜 주기
management:
  endpoints:
    web:
      exposure:
        include: "*"

# 구체적으로 명시하고싶은 로그 레벨을 명시하기
logging:
  level:
    # 여기서 발생하는 모든 로그는 debug 레벨로 보겠다
    com.my.springboardgradle: debug
    # 해당 request, response 로그가 어떤 패키지로부터 오는지 조사하겠다.
    org.springframework.web.servlet: debug
    # JPA 를 사용할 때, QueryLog 를 DebugLog 로 관찰할 수 있는데 이때 안에 들어가는 바인딩 파라미터들은 ? 로 나오게 되어서
    # 실제로 어떤 파라미터가 들어갔는지 보이지 않게 된다.
    # 그 파라미터를 관찰하기 위해 설정해두었다.
    org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: lmh0237
    password: 1234qwer!
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    # 테스트용 DB 데이터를 생성할 수 있게 하기 (resources\data.sql)
    defer-datasource-initialization: true
    # 우리가 만든 엔티티를 보고 테이블 데이터를 유추하여 자동으로 DDL 문을 만들어 주기
    hibernate:
      ddl-auto: create
    # SQL 쿼리문 보여주게 하기
    show-sql: true
    # 추가적인 properties 를 통해서 JPA 에 사용할 구현체에 종속될 property 를 따로 설정해주기
    properties:
      # 한줄로 나오는 쿼리문을 이쁘게 보여주기
      hibernate.format_sql: true
      # 복잡한 쿼리를 사용하게 될 때 IN QUERY 로 바꿔줘서 한번에 SELECT 를 해줘서 가져오기
      hibernate.default_batch_fetch_size: 100
  # H2 웹 콘솔을 쓸지 말지 정해주기
  h2:
    console:
      enabled: false
  # data.sql 을 언제 작동시킬것인지
  sql:
    init:
      mode: always
  data:
    rest:
      base-path: /api
      detection-strategy: annotated
  thymeleaf3.decoupled-logic: true

---

#spring:
#  config:
#    activate:
#      on-profile: testdb
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql
#    driver-class-name: org.h2.Driver
#  sql:
#    init:
#      mode: always
## 테스트 상태에서 돌려도 testdb를 따로 불러오지 않고 설정되있는 것을 쓰는 전역설정
#  test.database.replace: none